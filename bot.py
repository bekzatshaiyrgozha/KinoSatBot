import os
import logging
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler
import psycopg2
import easyocr
from pdf2image import convert_from_path

TOKEN = "7904637967:AAFS7tS0Ca1cDyKEtwW_Of42vS8igVuIMhI"
VIDEO_PATH = "BAACAgIAAxkBAAM_aAZoOSAXaE6YIs8eAoD7Qe9J3A0AAiVyAAIFXjBIHKmqjEg9rEg2BA"

reader = easyocr.Reader(['ru', 'en'])

DATA_FILE = "used_data.json"
if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, "w") as f:
        json.dump({"users": [], "checks": []}, f)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ “õ–æ—Å—É
logging.basicConfig(level=logging.DEBUG)

def load_data():
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

# PostgreSQL –¥–µ—Ä–µ–∫—Ç–µ—Ä –±–∞–∑–∞—Å—ã–Ω–∞ “õ–æ—Å—ã–ª—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã
def get_db_connection():
    conn = psycopg2.connect(
        dbname="participants_db", 
        user="postgres", 
        password="adminpassword", 
        host="localhost", 
        port="5432"
    )
    return conn

def validate_text(text, user_id):
    if " 1 000—Ç " and "–∞–ª–∏–Ω—É—Ä –∏." in text:
        return True, ""
    else:
        return False, "‚ùå –¢”©–ª–µ–º —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç —Ç–∞–±—ã–ª–º–∞–¥—ã. –ß–µ–∫—Ç—ñ —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑."

# –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã“£ –∞—Ç—ã-–∂”©–Ω—ñ–Ω –µ–Ω–≥—ñ–∑—É
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    greeting_text = (
        "–°”ô–ª–µ–º! \n"
        "–°–µ–Ω—ñ ”©–∑ –æ—Ä—Ç–∞–º—ã–∑–¥–∞ –∫”©—Ä–≥–µ–Ω—ñ–º—ñ–∑–≥–µ “õ—É–∞–Ω—ã—à—Ç—ã–º—ã–∑! üî•\n\n"
        "–ö”©–∫—Ç–µ–º–¥—ñ–∫ –∫”©“£—ñ–ª –∫“Ø–π —Å—ã–π–ª–∞–π—Ç—ã–Ω *KBTU* –∫–∏–Ω–æ—Å—ã–Ω –∫”©—Ä—ñ–ø “õ–∞–Ω–∞ “õ–æ–π–º–∞–π, —Ç”©–º–µ–Ω–¥–µ–≥—ñ —Å—ã–π–ª—ã“õ—Ç–∞—Ä–¥—ã –∞–ª—É“ì–∞ –º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ“£ –±–∞—Äüëáüèª\n\n"
        "1. *–ë–ê–°–¢–´ –°–´–ô–õ–´“ö:* Mersides –∞–≤—Ç–æ–∫”©–ª—ñ–≥—ñ üöÄ\n"
        "2. *–°—ñ–∑ “õ–∞–ª–∞–π—Ç—ã–Ω* IPhone 16 üòç\n"
        "3. *–ö–µ–∑-–∫–µ–ª–≥–µ–Ω “Ø–π–¥–µ –±–æ–ª—É—ã —Ç–∏—ñ—Å* PlayStation üéÆ\n"
        "4. *–°“±–ª—É “õ—ã–∑–¥–∞—Ä“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω* Dyson üíÖüèª\n"
        "5. *500 000‚Ç∏ –∞“õ—à–∞–ª–∞–π —Å—ã–π–∞“õ—ã* üí∏\n\n"
        "üé¨ *KBTU* –∫–∏–Ω–æ—Å—ã–Ω –∫”©—Ä—É “Ø—à—ñ–Ω, –∞–ª–¥—ã–º–µ–Ω ”©–∑ –∞—Ç—ã“£–¥—ã –µ–Ω–≥—ñ–∑—ñ–ø —Ç—ñ—Ä–∫–µ–ª!\n\n"
        "_–ú—ã—Å–∞–ª—ã: –ñ–∞–Ω“õ–æ–∂–∞ “ö–∞–Ω–∞—Ç_"
    )

    # Inline –∫–ª–∞–≤–∏—à–∞–ª–∞—Ä—ã–Ω –∂–∞—Å–∞—É
    keyboard = [
        [InlineKeyboardButton("üéüÔ∏è –ë–∏–ª–µ—Ç—Ç–µ—Ä—ñ–º–¥—ñ –∫”©—Ä—É", callback_data='show_ticket')]  # –ö–Ω–æ–ø–∫–∞ –º–µ–Ω –æ–Ω—ã“£ callback_data
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(greeting_text, parse_mode="Markdown", reply_markup=reply_markup)
    logging.debug(f"User {update.message.from_user.id} started the process.")
    return "NAME_INPUT"

# –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã“£ –∞—Ç—ã-–∂”©–Ω—ñ–Ω ”©“£–¥–µ—É
# –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã“£ –∞—Ç—ã-–∂”©–Ω—ñ–Ω ”©“£–¥–µ—É
async def process_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    full_name = update.message.text.strip()

    if len(full_name.split()) < 2:
        await update.message.reply_text("‚ùå –ê—Ç—ã“£—ã–∑ –±–µ–Ω –∂”©–Ω—ñ“£—ñ–∑–¥—ñ —Ç–æ–ª—ã“õ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑. –ú—ã—Å–∞–ª—ã: '–ñ–∞–Ω“õ–æ–∂–∞ “ö–∞–Ω–∞—Ç'. “ö–∞–π—Ç–∞ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.")
        return "NAME_INPUT"

    # –î–µ—Ä–µ–∫—Ç–µ—Ä –±–∞–∑–∞—Å—ã–Ω–∞ —Å–∞“õ—Ç–∞—É
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute('INSERT INTO participants (full_name, telegram_id) VALUES (%s, %s) RETURNING id',
                    (full_name, update.message.from_user.id))
        participant_id = cur.fetchone()[0]
        conn.commit()
        cur.close()
        conn.close()
    except Exception as e:
        logging.error(f"Database error: {e}")
        await update.message.reply_text("‚ùå –î–µ—Ä–µ–∫—Ç–µ—Ä –±–∞–∑–∞—Å—ã–Ω–∞ “õ–æ—Å—ã–ª–∞ –∞–ª–º–∞–¥—ã“õ. “ö–∞–π—Ç–∞–¥–∞–Ω ”ô—Ä–µ–∫–µ—Ç –µ—Ç—ñ“£—ñ–∑.")
        return "NAME_INPUT"

    await update.message.reply_text(f"‚úÖ –ê—Ç—ã“£—ã–∑ –±–µ–Ω –∂”©–Ω—ñ“£—ñ–∑ —Å–∞“õ—Ç–∞–ª–¥—ã!")

    # üéüÔ∏è –ù–æ–º–µ—Ä–æ–∫—Ç–∞—Ä—ã–º –∫–Ω–æ–ø–∫–∞—Å—ã –±–∞—Ä —Å–æ–æ–±—â–µ–Ω–∏–µ
    keyboard = [
        [InlineKeyboardButton("üéüÔ∏è –ù–æ–º–µ—Ä–æ–∫—Ç–∞—Ä—ã–º", callback_data='show_ticket')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–ë–∏–ª–µ—Ç—Ç–µ—Ä—ñ“£—ñ–∑ –¥–∞–π—ã–Ω! –¢”©–º–µ–Ω–¥–µ–≥—ñ –∫–Ω–æ–ø–∫–∞–Ω—ã –±–∞—Å—ã“£—ã–∑:", reply_markup=reply_markup)

    # –¢”©–ª–µ–º –∂”©–Ω—ñ–Ω–¥–µ –Ω“±—Å“õ–∞—É–ª—ã“õ
    instruction_text = (
        "‚öôÔ∏è *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n\n"
        "‚ö†Ô∏è –ú“±–Ω–¥–∞ –º—ñ–Ω–¥–µ—Ç—Ç—ñ —Ç“Ø—Ä–¥–µ *1000 —Ç–µ“£–≥–µ* —Ç”©–ª–µ–Ω—É –∫–µ—Ä–µ–∫. "
        "–ë–∞—Å“õ–∞ —Å—É–º–º–∞ —Ç”©–ª–µ–ø “õ–æ–π—Å–∞“£—ã–∑, –±–æ—Ç –æ“õ—ã–º–∞–π–¥—ã –∂”ô–Ω–µ –∞“õ—à–∞“£—ã–∑ “õ–∞–π—Ç–ø–∞–π–¥—ã. “ö–∞—Ç–µ—Å—ñ–∑ —Ç”©–ª–µ“£—ñ–∑!\n\n"
        "1. –¢”©–ª–µ–º –∂–∞—Å–∞–ø –±–æ–ª“ì–∞–Ω —Å–æ“£ *—á–µ–∫—Ç—ñ PDF —Ñ–∞–π–ª* –∞—Ä“õ—ã–ª—ã –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ (—Ç”©–º–µ–Ω–¥–µ–≥—ñ–¥–µ–π)\n"
        "2. *–¢”©–ª–µ–Ω–µ—Ç—ñ–Ω —Å—É–º–º–∞ —Ç–µ–∫ 1000 —Ç–µ“£–≥–µ –±–æ–ª—É—ã –∫–µ—Ä–µ–∫*\n"
        "3. –¢”©–ª–µ–º —Ä–∞—Å—Ç–∞–ª“ì–∞–Ω–Ω–∞–Ω –∫–µ–π—ñ–Ω –±–æ—Ç —Å—ñ–∑–≥–µ *–±–∏–ª–µ—Ç –Ω”©–º—ñ—Ä—ñ“£—ñ–∑ –±–µ–Ω –∫–∏–Ω–æ–Ω—ã* –∂—ñ–±–µ—Ä–µ–¥—ñ\n\n"
        "üí≥ *Kaspi Gold:* `4400 4301 1234 5678`\n"
        "‚úÖ –¢”©–ª–µ–º –∂–∞—Å–∞–ø –±–æ–ª“ì–∞–Ω —Å–æ“£, —á–µ–∫—Ç—ñ PDF –Ω–µ–º–µ—Å–µ —Ñ–æ—Ç–æ —Ä–µ—Ç—ñ–Ω–¥–µ –æ—Å—ã —á–∞—Ç“õ–∞ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:"
    )
    
    await update.message.reply_text(instruction_text, parse_mode="Markdown")
    return "CHECK_PROCESS"

# –ß–µ–∫ —Å—É—Ä–µ—Ç—ñ–Ω ”©“£–¥–µ—É
async def process_image(file_path, update: Update):
    await update.message.reply_text("üïê –ß–µ–∫ —Ç–µ–∫—Å–µ—Ä—ñ–ª—É–¥–µ... –ë“±–ª –±—ñ—Ä–Ω–µ—à–µ –º–∏–Ω—É—Ç“õ–∞ —Å–æ–∑—ã–ª—É—ã –º“Ø–º–∫—ñ–Ω. ”®—Ç—ñ–Ω—ñ—à, –∫“Ø—Ç–µ —Ç“±—Ä—ã“£—ã–∑ üôè")

    # –ß–µ–∫ –º”ô—Ç—ñ–Ω—ñ–Ω —Ç–∞–Ω—É
    result = reader.readtext(file_path, detail=0)
    text = " ".join(result).lower()

    logging.debug(f"Text recognized: {text}")

    is_valid, error = validate_text(text, update.message.from_user.id)

    if is_valid:
        # –¢”©–ª–µ–º —Ä–∞—Å—Ç–∞–ª“ì–∞–Ω –∫–µ–∑–¥–µ –∫–∏–Ω–æ –∂—ñ–±–µ—Ä—É
        await update.message.reply_text("‚úÖ –¢”©–ª–µ–º —Ä–∞—Å—Ç–∞–ª–¥—ã! –ú—ñ–Ω–µ, —Å—ñ–∑–¥—ñ“£ –∫–∏–Ω–æ üé¨:")
        await update.message.reply_video(video=VIDEO_PATH)
        logging.debug(f"User {update.message.from_user.id} received the video.")
    else:
        await update.message.reply_text(error)
        logging.debug(f"User {update.message.from_user.id} failed validation with error: {error}")

# –ß–µ–∫ PDF —Ñ–∞–π–ª—ã–Ω—ã“£ ”©“£–¥–µ–ª—É—ñ
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = await update.message.document.get_file()
    file_path = f"{update.message.from_user.id}_check.pdf"
    await file.download_to_drive(file_path)

    images = convert_from_path(file_path, dpi=300)
    image_path = file_path.replace(".pdf", ".jpg")
    images[0].save(image_path, "JPEG")

    await process_image(image_path, update)

    os.remove(file_path)
    os.remove(image_path)

# –ß–µ–∫ —Å—É—Ä–µ—Ç—ñ–Ω ”©“£–¥–µ—É
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    file = await photo.get_file()
    file_path = f"{update.message.from_user.id}_check.jpg"
    await file.download_to_drive(file_path)

    await process_image(file_path, update)

    os.remove(file_path)

# –ë–∏–ª–µ—Ç—Ç—ñ –∫”©—Ä—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã
from telegram.ext import CallbackQueryHandler

async def show_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute('SELECT id, full_name FROM participants WHERE telegram_id = %s', (user_id,))
        row = cur.fetchone()
        cur.close()
        conn.close()

        if row:
            await query.answer()
            await query.message.reply_text(
                f"üéüÔ∏è –°—ñ–∑–¥—ñ“£ –±–∏–ª–µ—Ç –Ω”©–º—ñ—Ä—ñ“£—ñ–∑: {row[0]}\nüë§ –ï—Å—ñ–º—ñ“£—ñ–∑: {row[1]}"
            )
        else:
            await query.answer()
            await query.message.reply_text("‚ùó –°—ñ–∑ —Ç—ñ—Ä–∫–µ–ª–º–µ–≥–µ–Ω—Å—ñ–∑ –Ω–µ–º–µ—Å–µ —Ç”©–ª–µ–º –∂–∞—Å–∞–º–∞“ì–∞–Ω—Å—ã–∑.")
    except Exception as e:
        logging.error(f"DB error: {e}")
        await query.answer()
        await query.message.reply_text("üîå “ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.")

# –ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É
app = ApplicationBuilder().token(TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        "NAME_INPUT": [MessageHandler(filters.TEXT & ~filters.COMMAND, process_name)],
        "CHECK_PROCESS": [MessageHandler(filters.Document.PDF, handle_document),
                          MessageHandler(filters.PHOTO, handle_photo)],
    },
    fallbacks=[],
)

app.add_handler(CommandHandler("ticket", show_ticket))
app.add_handler(conv_handler)
app.add_handler(CallbackQueryHandler(show_ticket, pattern='show_ticket'))


print("ü§ñ –ë–æ—Ç –∂“±–º—ã—Å —ñ—Å—Ç–µ—É–¥–µ...")
app.run_polling()
